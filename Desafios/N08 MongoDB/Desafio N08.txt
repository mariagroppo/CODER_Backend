Consigna: Utilizando Mongo Shell, crear una base de datos llamada ecommerce que contenga dos colecciones: mensajes y productos.

1. Agregar 10 documentos con valores distintos a las colecciones mensajes y productos. 
El formato de los documentos debe estar en correspondencia con el que venimos utilizando en el entregable con base de
datos MariaDB.
2. Definir las claves de los documentos en relación a los campos de las tablas de esa base. 
En el caso de los productos, poner valores al campo precio entre los 100 y 5000 pesos(eligiendo valores intermedios, 
ej: 120, 580, 900, 1280, 1700, 2300, 2860, 3350, 4320, 4990). 

PRODUCTOS: nombre, precio, url.
MENSAJE: usuario, mensaje, fecha

use ecommerce
db.productos.insertMany([ { "nombre" : "Producto 1", "precio": 102, "ruta": "ruta 1"},
			 { "nombre" : "Producto 2", "precio": 2347, "ruta": "ruta 2"},
			 { "nombre" : "Producto 3", "precio": 4004, "ruta": "ruta 3"},
			 { "nombre" : "Producto 4", "precio": 1234, "ruta": "ruta 4"},
			 { "nombre" : "Producto 5", "precio": 5000, "ruta": "ruta 5"},
			 { "nombre" : "Producto 6", "precio": 137, "ruta": "ruta 6"},
			 { "nombre" : "Producto 7", "precio": 927, "ruta": "ruta 7"},
			 { "nombre" : "Producto 8", "precio": 1382, "ruta": "ruta 8"},
			 { "nombre" : "Producto 9", "precio": 1946, "ruta": "ruta 9"},
			 { "nombre" : "Producto 10", "precio": 333, "ruta": "ruta 10"}])
db.mensajes.insertMany([ { "usuario": "Maria", "mensaje": "Hola!", "fecha": "8/13/2022 9:33:28 AM" },
			{ "usuario": "Sergio", "mensaje": "Holaaaaa!", "fecha": "8/13/2022 9:36:28 AM" },
			{ "usuario": "Tiago", "mensaje": "¡Hola!", "fecha": "8/13/2022 9:37:28 AM" },
			{ "usuario": "Vito", "mensaje": "Hola! :)", "fecha": "8/13/2022 9:38:28 AM" },
			{ "usuario": "Maria", "mensaje": "Como andan?", "fecha": "8/14/2022 10:36:28 AM" },
			{ "usuario": "Sergio", "mensaje": "Bien, el resto?!", "fecha": "8/14/2022 11:36:28 AM" },
			{ "usuario": "Tiago", "mensaje": "Muy bien!", "fecha": "8/14/2022 11:40:28 AM" },
			{ "usuario": "Tiago", "mensaje": "¿Que hay de comer?", "fecha": "8/15/2022 7:36:28 AM" },
			{ "usuario": "Vito", "mensaje": " :D ", "fecha": "8/15/2022 9:36:28 AM" },
			{ "usuario": "Vito", "mensaje": "Adiossssss!", "fecha": "8/15/2022 10:36:28 AM" } ])

-------------------------------------------------------------------------------------------
3. Listar todos los documentos en cada colección.
db.productos.find()
db.mensajes.find()

-------------------------------------------------------------------------------------------
4. Mostrar la cantidad de documentos almacenados en cada una de ellas.
db.productos.estimatedDocumentCount()
db.mensajes.estimatedDocumentCount()

-------------------------------------------------------------------------------------------
5. Realizar un CRUD sobre la colección de productos:
	a. Agregar un producto más en la colección de productos.

db.productos.insertOne({ "nombre" : "Producto 11", "precio": 1022, "ruta": "ruta 11"})

	b. Realizar una consulta por nombre de producto específico:

db.productos.find({nombre: 'Producto 3'})

	c. Listar los productos con precio menor a 1000 pesos.

db.productos.find({ precio: {$lt: 1000} })

	d. Listar los productos con precio entre los 1000 a 3000 pesos.

db.productos.find({$and: [{precio: {$gte: 1000}}, {precio: {$lte: 3000}}]})

	e. Listar los productos con precio mayor a 3000 pesos.

db.productos.find({ precio: {$gt: 3000} })

	f. Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

db.productos.find().skip(2).limit(1).sort({precio: 1})

	g. Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

db.productos.updateMany({}, {$set: {stock: 100}}, {upsert: true})

	d. Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

db.productos.updateMany({precio: {$gt: 4000}}, {$set: {stock: 0}})
 
	e. Borrar los productos con precio menor a 1000 pesos 

db.productos.deleteMany({precio: {$lt: 1000}})

-------------------------------------------------------------------------------------------
6. Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. 
Verificar que pepe no pueda cambiar la información.

db.createUser({user: 'pepe', pwd: 'asd456', roles: [{role: 'read', db: 'ecommerce'}]})

Al usar el comando "show users" me muestra los usuarios y roles creados.

[
  {
    _id: 'ecommerce.encargado',
    userId: UUID("6845c145-80fb-4fc3-b433-24e783b36bae"),
    user: 'encargado',
    db: 'ecommerce',
    roles: [ { role: 'readWrite', db: 'empresa' } ],
    mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
  },
  {
    _id: 'ecommerce.pepe',
    userId: UUID("36e9f798-eb66-43cb-8080-de6b4209527d"),
    user: 'pepe',
    db: 'ecommerce',
    roles: [ { role: 'read', db: 'ecommerce' } ],
    mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
  }
]


Verificación:
A. Modifico archivo: mongodb.cfg. Quite la marca de comentario de la línea security, eliminando el signo de numeral (#).
Añadi el parámetro authorization y estableci "enabled".

security:
  authorization: "enabled"

B.https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04-es


Para la verificación:
A. Salgo del mongo shell.
B. Abro consola desde la ruta donde se encuentra mongo shell y escribo:

mongosh -u pepe -p asd456 --authenticationDatabase ecommerce.

C. use ecommerce
D. Pruebo insertar un dato:

db.productos.insertOne({ "nombre" : "Producto 12", "precio": 1108, "ruta": "ruta 12"})


