SERVIDOR CON BALANCE DE CARGA
Tomando con base el proyecto que vamos realizando, agregar un parámetro más en la ruta de comando 
que permita ejecutar al servidor en modo fork o cluster. Dicho parámetro será 'FORK' en el primer caso y 
'CLUSTER' en el segundo, y de no pasarlo, el servidor iniciará en modo fork.
I- Agregar en la vista info, el número de procesadores presentes en el servidor.
Ver ruta /info.
II- Ejecutar el servidor (modos FORK y CLUSTER) con nodemon verificando el número de procesos 
tomados por node.
nodemon server.js
nodemon server.js --FORK
nodemon server.js --CLUSTER

III- Ejecutar el servidor (con los parámetros adecuados) utilizando Forever, verificando su correcta 
operación. Listar los procesos por Forever y por sistema operativo.

forever start server.js
forever start server.js --FORK
forever list
forever stop server.js

IV - Ejecutar el servidor (con los parámetros adecuados: modo FORK) utilizando PM2 en sus modos modo fork 
y cluster. Listar los procesos por PM2 y por sistema operativo.
pm2 start server.js
pm2 start server.js -p 8081
pm2 start server.js -i max

pm2 stop server.js
pm2 delete server.js

V - Tanto en Forever como en PM2 permitir el modo escucha, para que la actualización del código del 
servidor se vea reflejado inmediatamente en todos los procesos.
pm2 start server.js --watch
pm2 start server.js -i max --watch

VI - Hacer pruebas de finalización de procesos fork y cluster en los casos que corresponda.
pm2 delete all

----------------------------------------------------------------------------------------------------
>> Consigna:
Configurar Nginx para balancear cargas de nuestro servidor de la siguiente manera:
- Redirigir todas las consultas a /api/randoms a un cluster de servidores escuchando en el puerto 8081.
El cluster será creado desde node utilizando el módulo nativo cluster.
- El resto de las consultas, redirigirlas a un servidor individual escuchando en el puerto 8080.
- Verificar que todo funcione correctamente.
- Luego, modificar la configuración para que todas las consultas a /api/randoms sean redirigidas a un 
cluster de servidores gestionado desde nginx, repartiéndolas equitativamente entre 4 instancias 
escuchando en los puertos 8082, 8083, 8084 y 8085 respectivamente.
